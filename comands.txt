Шпаргалка по командам Git с простыми разъяснениями:
1. Настройка:
git config --global user.name "Ваше имя": "Представьтесь, пожалуйста, Git!" - Устанавливает ваше имя, которое будет использоваться в коммитах.
git config --global user.email "ваш_email@example.com": "Вот мой электронный адрес, Git!" - Устанавливает ваш email, который будет использоваться в коммитах.
2. Создание репозитория:
git init: "Создать новую площадку для проекта!" - Инициализирует новый Git-репозиторий в текущей папке.
3. Добавление файлов и изменений:
git add <имя_файла>: "Добавить этот файл в список ожидания!" - Добавляет указанный файл в индекс (staging area) для следующего коммита.
git add .: "Добавить все изменённые файлы в список ожидания!" - Добавляет все изменённые файлы в индекс.
4. Коммиты:
git commit -m "Сообщение коммита": "Зафиксировать изменения с пояснением!" - Создает новый коммит, который сохраняет текущее состояние проиндексированных файлов.
5. Просмотр изменений:
git diff: "Что я изменил в файлах?" - Показывает разницу между рабочей директорией и индексом (или последним коммитом, если нет проиндексированных изменений).
git diff --staged: "Что будет включено в следующий коммит?" - Показывает разницу между индексом и последним коммитом.
git log: "Показать журнал изменений!" - Отображает историю коммитов в репозитории.
6. Откат изменений:
git checkout <хеш_коммита> <имя_файла>: "Вернуться к предыдущей версии файла!" - Восстанавливает указанный файл к состоянию на момент указанного коммита.
git checkout master <имя_файла>: "Вернуть файл к последней версии!" - Восстанавливает указанный файл к последней версии в ветке master.
7. Удаление и перемещение файлов:
git rm <имя_файла>: "Удалить этот файл!" - Удаляет файл из репозитория и индекса.
git mv <старое_имя> <новое_имя>: "Переименовать этот файл!" - Перемещает (переименовывает) файл.
8. Игнорирование файлов:
.gitignore: "Этот файл - невидимка для Git!" - Специальный файл, в котором указываются файлы и папки, которые Git должен игнорировать (не отслеживать).
Это лишь некоторые из основных команд Git. По мере прохождения книги мы будем изучать новые команды и их возможности.
9. Работа с ветками:
git branch: "Какие дороги у моего проекта?" - Показывает список всех веток в репозитории.
git branch <имя_ветки>: "Создать новую дорогу!" - Создаёт новую ветку.
git checkout <имя_ветки>: "Переключиться на другую дорогу!" - Переключается на указанную ветку.
git merge <имя_ветки>: "Объединить две дороги!" - Объединяет указанную ветку с текущей веткой.
git branch -d <имя_ветки>: "Закрыть ненужную дорогу!" - Удаляет указанную ветку.
10. Работа с удалёнными репозиториями:
git remote add origin <url_репозитория>: "Подключить удалённый сервер!" - Добавляет удаленный репозиторий с именем origin.
git push -u origin master: "Отправить мои изменения на сервер!" - Отправляет изменения из локальной ветки master в удаленный репозиторий origin.
git pull origin master: "Забрать изменения с сервера!" - Забирает изменения из удаленной ветки master и объединяет их с локальной веткой.
git clone <url_репозитория>: "Скопировать чужой проект!" - Создаёт локальную копию удалённого репозитория.
11. Просмотр истории и информации:
git show <хеш_коммита>: "Показать детали этого коммита!" - Показывает информацию о конкретном коммите.
git log --oneline: "Показать историю коммитов кратко!" - Отображает историю коммитов в сокращенном формате, по одной строке на коммит.
git log --graph: "Показать историю коммитов в виде графа!" - Отображает историю коммитов в виде графика, показывая связи между ветками.
12. Дополнительные команды:
git stash: "Спрятать незавершённые изменения!" - Временно сохраняет незакоммиченные изменения.
git stash pop: "Достать спрятанные изменения!" - Восстанавливает последние спрятанные изменения.
git rebase: "Переписать историю коммитов!" - Мощная команда для изменения истории коммитов, но используйте её с осторожностью.
